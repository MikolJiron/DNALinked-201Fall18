Your Michael Jiron
Your jmj51
No Partner

Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.431	1290
StringStrand:	            512	      4,965,591	0.503	1290
StringStrand:	          1,024	      5,295,831	0.476	1290
StringStrand:	          2,048	      5,956,311	0.596	1290
StringStrand:	          4,096	      7,277,271	0.646	1290
StringStrand:	          8,192	      9,919,191	0.905	1290
StringStrand:	         16,384	     15,203,031	1.360	1290
StringStrand:	         32,768	     25,770,711	2.421	1290
StringStrand:	         65,536	     46,906,071	4.954	1290
StringStrand:	        131,072	     89,176,791	11.508	1290
StringStrand:	        262,144	    173,718,231	23.156	1290
StringStrand:	        524,288	    342,801,111	45.763	1290

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.027	1290
StringBuilderStrand:	            512	      4,965,591	0.019	1290
StringBuilderStrand:	          1,024	      5,295,831	0.007	1290
StringBuilderStrand:	          2,048	      5,956,311	0.006	1290
StringBuilderStrand:	          4,096	      7,277,271	0.006	1290
StringBuilderStrand:	          8,192	      9,919,191	0.008	1290
StringBuilderStrand:	         16,384	     15,203,031	0.010	1290
StringBuilderStrand:	         32,768	     25,770,711	0.019	1290
StringBuilderStrand:	         65,536	     46,906,071	0.049	1290
StringBuilderStrand:	        131,072	     89,176,791	0.075	1290
StringBuilderStrand:	        262,144	    173,718,231	0.311	1290
StringBuilderStrand:	        524,288	    342,801,111	0.488	1290

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,796,630	0.025	1290
LinkStrand:	            512	      4,961,750	0.020	1290
LinkStrand:	          1,024	      5,291,990	0.003	1290
LinkStrand:	          2,048	      5,952,470	0.005	1290
LinkStrand:	          4,096	      7,273,430	0.004	1290
LinkStrand:	          8,192	      9,915,350	0.004	1290
LinkStrand:	         16,384	     15,199,190	0.003	1290
LinkStrand:	         32,768	     25,766,870	0.005	1290
LinkStrand:	         65,536	     46,902,230	0.006	1290
LinkStrand:	        131,072	     89,172,950	0.004	1290
LinkStrand:	        262,144	    173,714,390	0.003	1290
LinkStrand:	        524,288	    342,797,270	0.005	1290
LinkStrand:	      1,048,576	    680,963,030	0.006	1290
LinkStrand:	      2,097,152	  1,357,294,550	0.005	1290
LinkStrand:	      4,194,304	  2,709,957,590	0.009	1290
LinkStrand:	      8,388,608	  5,415,283,670	0.005	1290
LinkStrand:	     16,777,216	 10,825,935,830	0.003	1290
LinkStrand:	     33,554,432	 21,647,240,150	0.007	1290
LinkStrand:	     67,108,864	 43,289,848,790	0.006	1290
LinkStrand:	    134,217,728	 86,575,066,070	0.005	1290
LinkStrand:	    268,435,456	173,145,500,630	0.004	1290
LinkStrand:	    536,870,912	346,286,369,750	0.004	1290

Question 1: are the benchmark timings for StringStrand consistent with the explanation below that the time to execute cutAndSplice is O(b2S)?

Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method
cutAndSplice -- see the code. This means that b2 will be constant in the benchmark, but S will vary.

Answer: Since b^2 will remain constant, the benchmark timing are consistent with the explanation that cutAndSplice is O(b^2 *S),
this is because one can see how the time begins to exponentially increase as the splicee size increases. For example,
when the size of the splicee remains around 256-4,096 chars, the increase was round .1 each time. But as the size doubled
from 16,384 to 32,768, there was a near double increase in runtime. After there was increase of splicee size from 65,356
to 131,072 the runtime more than doubled from 4.954 to 11.508.

Question 2: are the benchmark timings for StringBuilderStrand consistent with the explanation below that the time to execute cutAndSplice is O(bS)?

Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method
cutAndSplice -- see the code. This means that b will be constant in the benchmark, but S will vary.
Since b stays constant, as S, the length of the splicee varies, the runtime varies in proportion to S. This means that there is a more gradual, linear
increase in runtime. Therefore, there aren't any significant increases in runtime until the length of the splicee gets to the
131,072-524,288 range. Even so, the increase in runtime is more proportional and less exponential. There is a weird behavior where
the runtime jumps from 0.075 to 0.311 and then .488, which goes from quadrupling, to just doubling. Nevertheless, the increase in runtime is
significantly less in proportion to the increase in S, when compared to the StringStrand class.

Question 3: Explain why the time for LinkStrand does not change much at all over all the runs in the benchmark program.
Explain why you think memory is exhausted at the specific strand size you see in your timings -- as compared to exhaustion for String and StringBuilder.

In both StringStrand and StringBuilderStrand, a new copy of splicee must be created each time it is cutAndSpliced into the Strand.
However, with LinkStrand, you only need one copy of the splicee with which every new Node that is created can point to. This not
only significantly reduces the memory it takes, it also reduces the time. This means that it will run faster, and it will take a bigger
size splicee to fill up my computer's memory.